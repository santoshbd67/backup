<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1400.v7fd111b_ec82f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2184.v0b_358b_953e69"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2184.v0b_358b_953e69">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>2</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3889.v937e0b_3412d3">
    <script>pipeline {
    agent any
    tools{
        jdk &apos;jdk17&apos;
        maven &apos;maven3&apos;
    }
    environment{
        SCANNER_HOME= tool &apos;sonar-scanner&apos;
    }

    stages {
        stage(&apos;git-checkout&apos;) {
            steps {
                git &apos;https://github.com/Shree-85/secretsanta-generator.git&apos;
            }
        }

        stage(&apos;Code-Compile&apos;) {
            steps {
               sh &quot;mvn clean compile&quot;
            }
        }
        
        stage(&apos;Unit Tests&apos;) {
            steps {
               sh &quot;mvn test&quot;
            }
        }
        
		stage(&apos;OWASP Dependency Check&apos;) {
            steps {
               dependencyCheck additionalArguments: &apos; --scan ./ &apos;, odcInstallation: &apos;DP&apos;
                    dependencyCheckPublisher pattern: &apos;**/dependency-check-report.xml&apos;
            }
        }


        stage(&apos;Sonar Analysis&apos;) {
            steps {
               withSonarQubeEnv(&apos;sonar&apos;){
                   sh &apos;&apos;&apos; $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Santa \
                   -Dsonar.java.binaries=. \
                   -Dsonar.projectKey=Santa &apos;&apos;&apos;
               }
            }
        }

		 
        stage(&apos;Code-Build&apos;) {
            steps {
               sh &quot;mvn clean package&quot;
            }
        }

         stage(&apos;Docker Build&apos;) {
            steps {
               script{
                   withDockerRegistry(credentialsId: &apos;dockerhub&apos;) {
                    sh &quot;docker build -t  santa123 . &quot;
                 }
               }
            }
        }

        stage(&apos;Docker Push&apos;) {
            steps {
               script{
                   withDockerRegistry(credentialsId: &apos;dockerhub&apos;) {
                    sh &quot;docker tag santa123 shree085/santa123:latest&quot;
                    sh &quot;docker push shree085/santa123:latest&quot;
                 }
               }
            }
        }
        
        	 
     
    }
        
	
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>